_: /
  print <self.someValue intValue:23>
  someValue: /intValue
    intValue.sqrt

print: /...params
  stdout.write
    fmt params...

; Binding, Def, Copy are EnvObject instances.
; Literals, Arrays (fundamental values) are StringObject, IntObject,
; FloatObject, ListObject, instead of MapObject EnvObject might also be used.
; They all implement BaseObject which has one method which is 'acceptEvaluator'

; ASTEvaluator class that looks like this:
; public class ASTEvaluator implements BaseASTEvaluator<BaseObject> {
;   @Override public BaseObject visit(ASTBinding) { ... }
;   @Override public BaseObject visit(ASTDef) { ... }
;   @Override public BaseObject visit(ASTCopy) { ... }
;   @Override public BaseObject visit(ASTString) { ... }
;                             ... ... ...

; There must be a mechanism for defining objects manually (in java).
; It would look like this:
; class UJIPrintObject extends EnvObject implements ForeignObjectDef {
;   // think about it
;   // ForeignObjectDef has 'params' -> ASTDefParams.
;   // must also impl (or/and override) 'acceptEvaluator' from BaseObject
;   // try achieving it all in another branch 'evaluator'
; }

